require "rake/testtask"
require "sequel"

if ['development', 'test'].include?(ENV['<%= app_name.camelize.upcase %>'])
  require 'dotenv'
  require 'dotenv/tasks'

  Dotenv.load
end

namespace "db" do

  if ENV["<%= app_name.camelize.upcase %>"] == 'test'
    ENV['DATABASE'] = "#{ENV['DATABASE']}_test"
  end

  database_url = {
                   <% if dbms == 'mysql' %>
                   socket:   ENV['SOCKET'],
                   <% end %>
                   adapter:  ENV['ADAPTER'],
                   host:     ENV['HOST'],
                   port:     ENV['PORT'],
                   username: ENV['USERNAME'],
                   password: ENV['PASSWORD'],
                   database: ENV['DATABASE'],
                   encoding: 'utf8',
                   test:     true
                 }

  task :migrate do |t|
    version = nil
    Sequel.extension :migration
    db = Sequel.connect(database_url)

    puts "Running migrations..."  unless ENV['RACK_ENV'] == 'test'
    Sequel::Migrator.apply(db, 'db/migrate', version && version.to_i)
    db.disconnect

    Rake::Task["db:dump_schema"].execute
  end

  task :dump_schema do |t|
    require 'sequel'
    Sequel.extension :schema_dumper
    schema_file="#{File.dirname(__FILE__)}/db/schema.rb"
    db = Sequel.connect(database_url)

    puts 'Dumping schema...' unless ENV['RACK_ENV'] == 'test'
    open(schema_file, 'w') do |f|
      f << db.dump_schema_migration(:same_db => false)
    end
    db.disconnect
  end
  
  desc "Creates a new migration file with the specified name"
  task :new_migration, :name do |t, args|
    name = args[:name] || ENV['name']
    options = args[:options] || ENV['options']
    
    unless name
      puts "Error: must provide name of migration to generate."
      puts "For example: rake #{t.name} name=add_field_to_form"
      abort
    end
    
    migrations_dir = File.join("db", "migrate")
    version ||= Time.now.utc.strftime("%Y%m%d%H%M%S")
    filename = "#{version}_#{name}.rb"

    FileUtils.mkdir_p(migrations_dir)

    open(File.join(migrations_dir, filename), 'w') do |f|
      f << (<<-EOS).gsub("          ", "")
        Sequel.migration do
          change do
          end
        end
      EOS
    end
  end
end

